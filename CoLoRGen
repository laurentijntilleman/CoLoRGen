#!/bin/bash

Help()
{
    echo 'usage: launch_CoLoRGen.sh [-h] [-c]'
    echo
    echo 'CoLoRGen: comprehensive long read genotyping pipeline.'
    echo
    echo 'This tool generates consensus sequence of the targeted regio per allele'
    echo 'and returns vcf files for each gene that is found. If star-alleles are'
    echo 'present, the correct star-allles are assigned to the genes.'
    echo
    echo 'arguments:'
    echo '  -p  path to the parameters file'
    echo 
    echo 'optinal arguments:'
    echo '  -h  show this help message and exit'
    exit 1
}

while getopts p:hd flag
do
    case "${flag}" in
        p) parameters_path=${OPTARG};;
        h) Help;;
        d) debug=true
    esac
done

if [ -z ${parameters_path} ]; then
  echo 'Error no parameter -p'
  echo
  Help
fi

source ${parameters_path}

FILTER="(((TYPE=\"snp\" | TYPE=\"mnp\") & (QUAL > 9)) | ((TYPE!=\"snp\" & TYPE!=\"mnp\") & (QUAL > 9)))"

# structure of the output folder
raw_reads_folder=${analyse_folder}"raw_reads/" #raw and trimmed reads
mapped_folder=${analyse_folder}"mapped/" #alligned reads
haplotype_folder=${analyse_folder}"haplotype/" #haplotype data
log_folder=${analyse_folder}"log/" #log folder
gene_folder=${analyse_folder}"gene/" #log folder

## start script
# make the different directories
if [ ! -d "$analyse_folder" ]; then
  mkdir $analyse_folder
fi
if [ ! -d "$raw_reads_folder" ]; then
  mkdir $raw_reads_folder
fi
if [ ! -d "$mapped_folder" ]; then
  mkdir $mapped_folder
fi
if [ ! -d "$haplotype_folder" ]; then
  mkdir $haplotype_folder
fi
if [ ! -d "$log_folder" ]; then
  mkdir $log_folder
fi
if [ ! -d "$gene_folder" ]; then
  mkdir $gene_folder
fi


## start logging
echo "$(date) start script"
default_log_file=${log_folder}stout.log
error_log_file=${log_folder}error.log

# start virtualenv
source venv/bin/activate

echo "$(date) start script" > ${default_log_file}
echo This is the default log file >> ${default_log_file}
echo "$(date) start script" > ${error_log_file}
echo This is the error log >> ${error_log_file}

# build fasta and bed files of the targeted region and genes
python build_gene.py -i ${gene_json} -o ${ref_folder} -r ${reference_genome}

# copy the raw data to the working directory
if [[ ${nanopore_sequencing_files} == *.gz ]]; then
  cat ${nanopore_sequencing_files} > ${raw_reads_folder}all_reads.fastq.gz
else
  echo "$(date) compressing data" >> ${default_log_file}
  echo "$(date) compressing data"
  cat ${nanopore_sequencing_files} > ${raw_reads_folder}all_reads.fastq
  gzip ${raw_reads_folder}all_reads.fastq
fi

# alignment of the data
echo "$(date) start minimap2 raw reads" >> ${default_log_file}
echo "$(date) start minimap2 raw reads"
minimap2 -t ${number_treats} -a  -o ${mapped_folder}all_reads.sam ${minimap2_index} ${raw_reads_folder}all_reads.fastq.gz 2>> ${default_log_file}
samtools view -Sb ${mapped_folder}all_reads.sam > ${mapped_folder}all_reads.bam
samtools sort ${mapped_folder}all_reads.bam > ${mapped_folder}all_reads_sorted.bam
samtools index ${mapped_folder}all_reads_sorted.bam

# select reads on targeted
samtools view -b ${mapped_folder}all_reads_sorted.bam ${target_chr}:${target_start}-${target_stop} > ${mapped_folder}select_reads.bam
samtools index ${mapped_folder}select_reads.bam

# define haplotype
echo "$(date) start haplotyping with medaka" >> ${default_log_file}
echo "$(date) start haplotyping with medaka"
medaka_variant -s ${model_m} -m ${model_m} -r ${target_chr} -t ${number_treats} -p -l -f ${reference_genome} -i ${mapped_folder}select_reads.bam -o ${haplotype_folder}medaka_round_0/
# haplotag the alignment
bgzip ${haplotype_folder}medaka_round_0/round_1.vcf
tabix ${haplotype_folder}medaka_round_0/round_1.vcf.gz
whatshap haplotag --ignore-read-groups -o ${mapped_folder}select_reads_taged.bam --reference ${reference_genome} ${haplotype_folder}medaka_round_0/round_1.vcf.gz ${mapped_folder}select_reads.bam
samtools index ${mapped_folder}select_reads_taged.bam

# get secondary alignments
echo "$(date) get secondatry alignments" >> ${default_log_file}
echo "$(date) get secondatry alignments"
python get_second_aligments.py --log_level ${log_level}  --log_file ${default_log_file} -f ${raw_reads_folder}all_reads.fastq.gz -i ${mapped_folder}select_reads_taged.bam -o ${haplotype_folder}select_reads_taged -s ${target_start} -t ${target_stop}
cat ${haplotype_folder}select_reads_taged_H*.fastq > ${haplotype_folder}select_reads_taged.fastq

# align the secondary alignments
echo "$(date) start minimap2 secondary alignments" >> ${default_log_file}
echo "$(date) start minimap2 secondary alignments"
sample_sec=${haplotype_folder}select_reads_taged_split
minimap2 -t ${number_treats} -a  -o ${sample_sec}.sam ${minimap2_index} ${sample_sec}.fastq 2>> ${default_log_file}
samtools view -Sb ${sample_sec}.sam > ${sample_sec}.bam
samtools sort ${sample_sec}.bam > ${sample_sec}_sorted.bam
samtools index ${sample_sec}_sorted.bam

# find insertion and deletions and build haplotypes
echo "$(date) find insertion and deletions and build haplotypes" >> ${default_log_file}
echo "$(date) find insertion and deletions and build haplotypes"

python build_consensus_sequence.py --log_level ${log_level} --log_file ${default_log_file} -i ${sample_sec}_sorted.bam -o ${haplotype_folder}consensus_1 -r ${reference_genome} -c ${target_chr} -s ${target_start} -t ${target_stop}

# map reads to new consensus H1
echo "$(date) build consensus_2_H1" >> ${default_log_file}
echo "$(date) build consensus_2_H1"
sample_cosensus=${haplotype_folder}consensus_1_H1
minimap2 -t ${number_treats} -a  -o ${sample_cosensus}.sam ${sample_cosensus}.fasta ${haplotype_folder}select_reads_taged_H1.fastq 2>> ${default_log_file}
samtools view -Sb ${sample_cosensus}.sam > ${sample_cosensus}.bam
samtools sort ${sample_cosensus}.bam > ${sample_cosensus}_sorted.bam
samtools index ${sample_cosensus}_sorted.bam
medaka_consensus -i ${haplotype_folder}select_reads_taged_H1.fastq -d ${sample_cosensus}.fasta -o ${haplotype_folder}consensus_2_H1 -t ${number_treats} -m ${model_m}

# map reads to new consensus H2
echo "$(date) build consensus_2_H2" >> ${default_log_file}
echo "$(date) build consensus_2_H2"
sample_cosensus=${haplotype_folder}consensus_1_H2
minimap2 -t ${number_treats} -a  -o ${sample_cosensus}.sam ${sample_cosensus}.fasta ${haplotype_folder}select_reads_taged_H2.fastq 2>> ${default_log_file}
samtools view -Sb ${sample_cosensus}.sam > ${sample_cosensus}.bam
samtools sort ${sample_cosensus}.bam > ${sample_cosensus}_sorted.bam
samtools index ${sample_cosensus}_sorted.bam
medaka_consensus -i ${haplotype_folder}select_reads_taged_H2.fastq -d ${sample_cosensus}.fasta -o ${haplotype_folder}consensus_2_H2 -t ${number_treats} -m ${model_m}

# combine consensus
cat ${haplotype_folder}consensus_2_H1/consensus.fasta ${haplotype_folder}consensus_2_H2/consensus.fasta > ${haplotype_folder}consensus_2.fasta

# map all reads to consensus
# map reads to new consensus H2
echo "$(date) map reads to consensus_2" >> ${default_log_file}
echo "$(date) map reads to consensus_2"
sample=${haplotype_folder}consensus_2
minimap2 -t ${number_treats} -a  -o ${sample}.sam ${sample}.fasta ${haplotype_folder}select_reads_taged.fastq
samtools view -Sb ${sample}.sam > ${sample}.bam
samtools sort ${sample}.bam > ${sample}_sorted.bam
samtools index ${sample}_sorted.bam

# clean mapped reads
python clean_bam.py --log_level ${log_level}  --log_file ${default_log_file} -i ${sample}_sorted.bam -o ${sample}_clean
samtools index ${sample}_clean.bam

# make consensus 3
# map reads to new consensus H2
echo "$(date) build consensus_3" >> ${default_log_file}
echo "$(date) build consensus_3"
medaka_consensus -i ${haplotype_folder}consensus_2_clean_H1.fastq -d ${haplotype_folder}consensus_2_H1/consensus.fasta -o ${haplotype_folder}consensus_3_H1 -t ${number_treats} -m ${model_m}
medaka_consensus -i ${haplotype_folder}consensus_2_clean_H2.fastq -d ${haplotype_folder}consensus_2_H2/consensus.fasta -o ${haplotype_folder}consensus_3_H2 -t ${number_treats} -m ${model_m}
cat ${haplotype_folder}consensus_3_H1/consensus.fasta ${haplotype_folder}consensus_3_H2/consensus.fasta > ${haplotype_folder}consensus_3.fasta

# map all reads to consensus
echo "$(date) map reads to consensus_3" >> ${default_log_file}
echo "$(date) map reads to consensus_3"
sample=${haplotype_folder}consensus_3
minimap2 -t ${number_treats} -a  -o ${sample}.sam ${sample}.fasta ${haplotype_folder}select_reads_taged.fastq
samtools view -Sb ${sample}.sam > ${sample}.bam
samtools sort ${sample}.bam > ${sample}_sorted.bam
samtools index ${sample}_sorted.bam

# clean mapped reads
python clean_bam.py --log_level ${log_level}  --log_file ${default_log_file} -i ${sample}_sorted.bam -o ${sample}_clean
samtools index ${sample}_clean.bam

# build reference files
bowtie2-build ${sample}.fasta ${sample}
bowtie2 -a -x ${sample} -p ${number_treats} -f ${ref_folder}/genes.fasta -S ${sample}_genes.sam
samtools view -Sb ${sample}_genes.sam > ${sample}_genes.bam
samtools sort ${sample}_genes.bam > ${sample}_genes_sorted.bam
samtools index ${sample}_genes_sorted.bam


# make consensus 4
# map reads to new consensus H2
echo "$(date) build consensus_4" >> ${default_log_file}
echo "$(date) build consensus_4"
PROBS="${sample}_probs.hdf"
medaka consensus  ${sample}_clean.bam  "${PROBS}" --model "${model_m}" --batch_size 100  --threads "${number_treats}"
python variant_caller.py ${sample}.fasta ${sample}_genes_sorted.bam ${PROBS} ${star_alleles} ${gene_json} ${haplotype_folder}haplotypes ${reference_gtf}

# end virtualenv
deactivate
